{"version":3,"file":"static/js/3550.501a4ab9.chunk.js","mappings":"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","sources":["components/dashboard/setting/media/forms/ViewForm.tsx","pages/dashboard/setting/media/detail.tsx","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/utilities/object-utils/src/omit.ts","../node_modules/@chakra-ui/image/src/image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { Stack, StackDivider, CardBody, Card, Image } from \"@chakra-ui/react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { defaultForm } from \"utils/form\";\r\nimport TextInput from \"modules/forms/TextInput\";\r\n\r\nconst ViewMediaForm = (props: any) => {\r\n  const form = defaultForm(useForm);\r\n  const { detail } = useSelector((state: any) => state.mediaReducer); \r\n\r\n  useEffect(() => {\r\n    form.setValue('name', detail.name)\r\n    form.setValue('fileType', detail.fileType)\r\n    form.setValue('alt', detail.alt)\r\n  }, [detail.name, detail.fileType, detail.alt]);\r\n\r\n  return (\r\n    <Card w='100%'>\r\n      <CardBody>\r\n        <Stack spacing=\"5\" divider={<StackDivider />}>\r\n          <TextInput {...form} typical='media-name' isDisabled={true} bg={'gray.100'}/>\r\n          <TextInput {...form} typical='media-alt'  isDisabled={true} bg={'gray.100'}/>\r\n          <TextInput {...form} typical='media-type' isDisabled={true} bg={'gray.100'}/>\r\n          <Image boxSize='200px' src={detail?.url} alt={detail?.alt} />\r\n        </Stack> \r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ViewMediaForm;","import { actions } from \"components/dashboard/setting/media/slice\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { HStack, Stack } from '@chakra-ui/react'\r\nimport { Link, useLocation, useParams } from \"react-router-dom\";\r\nimport { FormButton } from \"modules/buttons/FormButton\";\r\nimport { makeUrl } from \"utils/link\";\r\nimport ViewMediaForm from \"components/dashboard/setting/media/forms/ViewForm\";\r\n\r\nconst DetailMediaPage = (props: any) => {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation()\r\n  const { mediaId } = useParams();\r\n  \r\n  useEffect(() => {\r\n    dispatch(actions.GET_DETAIL_ASYNC(mediaId))\r\n  }, []);\r\n  \r\n  return (\r\n    <Stack>\r\n      <HStack pb={5}>\r\n        <FormButton typical='list' permission=\"media.view\" as={Link} to={makeUrl('/dashboard/setting/media', location)}/>\r\n        <FormButton typical='edit' permission=\"media.update\" as={Link} to={makeUrl(`/dashboard/setting/media/${mediaId}/edit`, location)}/>\r\n      </HStack>\r\n      <ViewMediaForm />\r\n    </Stack>\r\n  )\r\n}\r\n\r\nexport default DetailMediaPage;","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"],"names":["props","form","defaultForm","useForm","detail","useSelector","state","mediaReducer","useEffect","setValue","name","fileType","alt","_jsx","Card","w","children","CardBody","_jsxs","Stack","spacing","divider","StackDivider","TextInput","typical","isDisabled","bg","Image","boxSize","src","url","dispatch","useDispatch","location","useLocation","mediaId","useParams","actions","GET_DETAIL_ASYNC","HStack","pb","FormButton","permission","as","Link","to","makeUrl","ViewMediaForm","forwardRef","ref","className","rest","styles","useCardStyles","jsx","chakra","div","cx","__css","body","CardStylesProvider","createStylesContext","direction","justify","align","omitThemingProps","useMultiStyleConfig","display","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","value","NativeImage","htmlWidth","htmlHeight","width","height","displayName","omit","object","keysToOmit","arguments","length","undefined","clone","Object","assign","key","fallbackSrc","fallback","srcSet","fit","loading","ignoreFallback","crossOrigin","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","status","useImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","img","onLoad","onError","sizes","setStatus","useState","imageRef","useRef","load","useCallback","flush","srcset","onload","event","onerror","error","current","useSafeLayoutEffect"],"sourceRoot":""}