{"version":3,"file":"static/js/5505.f576b759.chunk.js","mappings":"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","sources":["components/dashboard/setting/media/forms/EditForm.tsx","pages/dashboard/setting/media/edit.tsx","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { Stack, Button, StackDivider, VisuallyHidden, CardBody, Card } from \"@chakra-ui/react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { defaultForm } from \"utils/form\";\r\nimport { actions as mediaActions } from \"components/dashboard/setting/media/slice\";\r\nimport TextInput from \"modules/forms/TextInput\";\r\n\r\nconst EditMediaForm = (props: any) => {\r\n  const dispatch = useDispatch();\r\n  const form = defaultForm(useForm);\r\n  const { submitRef } = props;\r\n  const { detail } = useSelector((state: any) => state.mediaReducer); \r\n\r\n  useEffect(() => {\r\n    form.setValue('name', detail.name)\r\n    form.setValue('fileType', detail.fileType)\r\n    form.setValue('alt', detail.alt)\r\n  }, [detail.name, detail.fileType, detail.alt]);\r\n\r\n  const editMediaHandler = (data: any) => {\r\n    const editParams = {\r\n      ...data,\r\n      \r\n      id: detail.id,\r\n    };\r\n    dispatch(mediaActions.UPDATE_ASYNC(editParams));\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={form.handleSubmit(editMediaHandler)}>\r\n      <Card w='100%'>\r\n        <CardBody>\r\n          <Stack spacing=\"5\" divider={<StackDivider />}>\r\n            <TextInput {...form} typical='media-name' />\r\n            <TextInput {...form} typical='media-alt' />\r\n            <TextInput {...form} typical='media-type' />\r\n            <VisuallyHidden>\r\n              <Button type=\"submit\" ref={submitRef}/>\r\n            </VisuallyHidden>\r\n          </Stack> \r\n        </CardBody>\r\n      </Card>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditMediaForm;","import { actions } from \"components/dashboard/setting/media/slice\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { HStack } from \"@chakra-ui/react\";\r\nimport { FormButton } from \"modules/buttons/FormButton\";\r\nimport { makeUrl } from \"utils/link\";\r\nimport { Link, useLocation, useParams } from \"react-router-dom\";\r\nimport { Fragment, useRef } from \"react\";\r\nimport EditMediaForm from \"components/dashboard/setting/media/forms/EditForm\";\r\n\r\nconst EditMediaPage = (props: any) => {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const submitRef = useRef<any>(null);\r\n  const { mediaId } = useParams();\r\n\r\n  const submitHandler = (e: any) => {\r\n    submitRef.current.click();\r\n  };\r\n  \r\n  useEffect(() => {\r\n    dispatch(actions.GET_DETAIL_ASYNC(mediaId))\r\n  }, []);\r\n  \r\n  return (\r\n    <Fragment>\r\n      <HStack pb={5} >\r\n        <FormButton typical='list' permission=\"media.view\" as={Link} to={makeUrl('/dashboard/setting/media', location)} />\r\n        <FormButton typical='view' permission=\"media.view\" as={Link} to={makeUrl(`/dashboard/setting/media/${mediaId}`, location)} />\r\n        <FormButton typical='save' permission=\"media.update\" onClick={submitHandler} />\r\n      </HStack>\r\n      <EditMediaForm submitRef={submitRef}/>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default EditMediaPage;","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n"],"names":["props","dispatch","useDispatch","form","defaultForm","useForm","submitRef","detail","useSelector","state","mediaReducer","useEffect","setValue","name","fileType","alt","_jsx","onSubmit","handleSubmit","data","editParams","id","mediaActions","UPDATE_ASYNC","children","Card","w","CardBody","_jsxs","Stack","spacing","divider","StackDivider","TextInput","typical","VisuallyHidden","Button","type","ref","location","useLocation","useRef","mediaId","useParams","actions","GET_DETAIL_ASYNC","Fragment","HStack","pb","FormButton","permission","as","Link","to","makeUrl","onClick","e","current","click","EditMediaForm","forwardRef","className","rest","styles","useCardStyles","jsx","chakra","div","cx","__css","body","CardStylesProvider","createStylesContext","direction","justify","align","omitThemingProps","useMultiStyleConfig","display","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","value"],"sourceRoot":""}