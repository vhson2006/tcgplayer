{"version":3,"file":"static/js/6127.35a60a42.chunk.js","mappings":"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","sources":["modules/forms/FloatTextInput.tsx","pages/authentication/index.tsx","../node_modules/@chakra-ui/button/src/icon-button.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","../node_modules/@chakra-ui/layout/src/container.tsx"],"sourcesContent":["import { InputGroup, InputLeftElement, Icon, Input, InputRightElement, Text, FormControl, Stack, FormLabel } from \"@chakra-ui/react\"\r\nimport { inputSetting } from \"modules/forms/config\";\r\nimport { t } from \"commons/languages/helper\";\r\nimport { MdOutlineCheck } from \"react-icons/md\"\r\nimport { useState } from \"react\";\r\n\r\nconst FloatTextInput = (props: any) => {\r\n  const { typical,  errors, register, getValues, handleSubmit, setValue, trigger, ...otherProps } = props;\r\n\r\n  return (\r\n    <FormControl \r\n      variant=\"floating\"\r\n      id={inputSetting[typical].name} \r\n      isInvalid={true}\r\n      // maxW=\"xs\"\r\n    >\r\n      <InputGroup >\r\n        { \r\n          inputSetting[typical].icon ? \r\n          <InputLeftElement pointerEvents=\"none\">\r\n            <Icon as={inputSetting[typical].icon} color=\"fg.muted\" boxSize=\"4\" />\r\n          </InputLeftElement> \r\n          : <></>\r\n        }       \r\n        <Input\r\n          isInvalid={errors.hasOwnProperty(inputSetting[typical].name)}\r\n          errorBorderColor='red.300'\r\n          type={inputSetting[typical].name !== 'password' ? 'text' : 'password'}\r\n          {...register(inputSetting[typical].name, inputSetting[typical].rules)} \r\n          placeholder={''} \r\n          {...otherProps}\r\n        />\r\n        {\r\n          inputSetting[typical].rules && inputSetting[typical].rules.hasOwnProperty('required') && inputSetting[typical].rules.required ? \r\n          <FormLabel>\r\n            {t(inputSetting[typical].placeholder)}&nbsp;<span style={{color: 'red'}}>*</span>\r\n          </FormLabel> :\r\n          <FormLabel>{t(inputSetting[typical].placeholder)}</FormLabel>\r\n        }\r\n        {\r\n          !errors.hasOwnProperty(inputSetting[typical].name) &&\r\n          getValues(inputSetting[typical].name) != '' &&\r\n          <InputRightElement>\r\n            <Icon as={MdOutlineCheck} color=\"green.500\" boxSize=\"5\" />\r\n          </InputRightElement>\r\n        }\r\n      </InputGroup>\r\n      {\r\n        errors.hasOwnProperty(inputSetting[typical].name) &&\r\n        <Stack pt=\"1\">\r\n          <Text color='tomato' fontSize='10px'>\r\n            <i>{t(`error.${errors[inputSetting[typical].name].type}`)}</i>\r\n          </Text>\r\n        </Stack>\r\n      }\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default FloatTextInput","import { Container, Heading, Stack, Text } from '@chakra-ui/react'\r\nimport { LogoIcon } from 'modules/icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { t } from 'commons/languages/helper';\r\nimport { callJsonApi } from 'utils/api';\r\nimport { useForm } from 'react-hook-form';\r\nimport { defaultForm } from 'utils/form';\r\nimport { FormButton } from 'modules/buttons/FormButton';\r\nimport FloatTextInput from 'modules/forms/FloatTextInput';\r\nimport { common } from 'commons/config';\r\nimport notify from 'utils/notify';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actions } from 'components/authentication/slice';\r\nimport { encryptPermission } from 'utils/account';\r\nimport { jsonParse } from \"utils/json\";\r\n\r\nexport const LoginPage = () => {\r\n  const navigate = useNavigate();\r\n  const form = defaultForm(useForm);\r\n  const dispatch = useDispatch();\r\n  const { activedLanguage } = useSelector((state: any) => state.languageReducer); \r\n\r\n  const loginHandler = async (data: any) => {\r\n    try {\r\n      const response = await callJsonApi('POST', '/api/authentication/sign-in', data, activedLanguage)\r\n      if (response.status === common.INCORRECT) {\r\n        let infor = Array.isArray(response.message) ? response.message[0] : response.message\r\n        notify.error(infor && infor !== '' ? infor : t('message.error'))\r\n      } else {\r\n        const { accessToken, refreshToken, permission } = response\r\n        localStorage.setItem('token', accessToken)\r\n        localStorage.setItem('refresh', refreshToken)\r\n        localStorage.setItem('permission', encryptPermission(permission))\r\n        dispatch(actions.SET_PERMISSION(jsonParse(permission)))\r\n        navigate(`/dashboard`)\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container maxW=\"md\" py={{ base: '12', md: '24' }}>\r\n      <Stack spacing=\"8\">\r\n        <Stack spacing=\"6\">\r\n          <LogoIcon />\r\n          <Stack spacing={{ base: '2', md: '3' }} textAlign=\"center\">\r\n            <Heading size={{ base: 'xs', md: 'sm' }}>{t('login.title')}</Heading>\r\n            <Text color=\"fg.muted\">{t('login.description')}</Text>\r\n          </Stack>\r\n        </Stack>\r\n        <Stack spacing=\"6\">\r\n          <form onSubmit={form?.handleSubmit(loginHandler)}>\r\n            <Stack spacing=\"5\">\r\n              <FloatTextInput {...form} typical='email' />\r\n              <FloatTextInput {...form} typical='password' />\r\n            </Stack>\r\n            {/* <HStack justify=\"space-between\">\r\n              <Button as={Link} to={makeUrl('/dashboard', location)} variant=\"text\" size=\"sm\">\r\n                {t('login.forgot-password')}\r\n              </Button>\r\n            </HStack> */}\r\n            <Stack spacing=\"4\" pt={6}>\r\n              <FormButton typical=\"login\"  type=\"submit\"/>\r\n            </Stack>\r\n          </form>\r\n        </Stack>\r\n        {/* <Text textStyle=\"sm\" color=\"fg.muted\">\r\n          {t('login.register')}<Link to={makeUrl('/authentication/register', location)}>{t('button.register')}</Link>\r\n        </Text> */}\r\n      </Stack>\r\n    </Container>\r\n  )\r\n} \r\n\r\nexport default LoginPage;","import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n"],"names":["props","typical","errors","register","getValues","handleSubmit","setValue","trigger","otherProps","_jsxs","FormControl","variant","id","inputSetting","name","isInvalid","children","InputGroup","icon","_jsx","InputLeftElement","pointerEvents","Icon","as","color","boxSize","_Fragment","Input","hasOwnProperty","errorBorderColor","type","rules","placeholder","required","FormLabel","t","style","InputRightElement","MdOutlineCheck","Stack","pt","Text","fontSize","LoginPage","navigate","useNavigate","form","defaultForm","useForm","dispatch","useDispatch","activedLanguage","useSelector","state","languageReducer","Container","maxW","py","base","md","spacing","LogoIcon","textAlign","Heading","size","onSubmit","async","response","callJsonApi","data","status","common","INCORRECT","infor","Array","isArray","message","notify","error","accessToken","refreshToken","permission","localStorage","setItem","encryptPermission","actions","SET_PERMISSION","jsonParse","e","console","log","FloatTextInput","FormButton","IconButton","forwardRef","ref","isRound","ariaLabel","rest","element","_children","isValidElement","cloneElement","focusable","jsx","Button","padding","borderRadius","displayName","createIcon","options","viewBox","d","pathDefinition","defaultProps","path","Children","toArray","Comp","length","fill","className","centerContent","omitThemingProps","styles","useStyleConfig","chakra","div","cx","__css","display","flexDirection","alignItems"],"sourceRoot":""}