{"version":3,"file":"static/js/8235.e5909d4e.chunk.js","mappings":"yTAOA,MAuBA,EAvB0BA,IACxB,MAAMC,GAAOC,EAAAA,EAAAA,GAAYC,EAAAA,KACnB,OAAEC,IAAWC,EAAAA,EAAAA,KAAaC,GAAeA,EAAMC,kBAQrD,OANAC,EAAAA,EAAAA,YAAU,KACRP,EAAKQ,SAAS,OAAQL,EAAOM,MAC7BT,EAAKQ,SAAS,QAASL,EAAOO,OAC9BV,EAAKQ,SAAS,UAAWL,EAAOQ,QAAQ,GACvC,CAACR,EAAOM,KAAMN,EAAOO,MAAOP,EAAOQ,WAGpCC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,EAAE,OAAMC,UACZH,EAAAA,EAAAA,KAACI,EAAAA,EAAQ,CAAAD,UACPE,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,QAAQ,IAAIC,SAASR,EAAAA,EAAAA,KAACS,EAAAA,EAAY,IAAIN,SAAA,EAC3CH,EAAAA,EAAAA,KAACU,EAAAA,EAAS,IAAKtB,EAAMuB,QAAQ,OAAOC,YAAY,EAAMC,GAAI,cAC1Db,EAAAA,EAAAA,KAACU,EAAAA,EAAS,IAAKtB,EAAMuB,QAAQ,QAAQC,YAAY,EAAMC,GAAI,cAC3Db,EAAAA,EAAAA,KAACU,EAAAA,EAAS,IAAKtB,EAAMuB,QAAQ,UAAUC,YAAY,EAAMC,GAAI,mBAG5D,ECGX,EApB4B1B,IAC1B,MAAM2B,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACX,WAAEC,IAAeC,EAAAA,EAAAA,KAMvB,OAJAxB,EAAAA,EAAAA,YAAU,KACRmB,EAASM,EAAAA,GAAQC,iBAAiBH,GAAY,GAC7C,KAGDb,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAH,SAAA,EACJE,EAAAA,EAAAA,MAACiB,EAAAA,EAAM,CAACC,GAAI,EAAEpB,SAAA,EACZH,EAAAA,EAAAA,KAACwB,EAAAA,EAAU,CAACb,QAAQ,OAAOc,WAAW,gBAAgBC,GAAIC,EAAAA,GAAMC,IAAIC,EAAAA,EAAAA,IAAQ,sBAAuBb,MACnGhB,EAAAA,EAAAA,KAACwB,EAAAA,EAAU,CAACb,QAAQ,OAAOc,WAAW,kBAAkBC,GAAIC,EAAAA,GAAMC,IAAIC,EAAAA,EAAAA,IAAS,uBAAsBX,SAAmBF,SAE1HhB,EAAAA,EAAAA,KAAC8B,EAAgB,MACX,C,8FCnBC1B,GAAW2B,EAAAA,EAAAA,IAAiC,SACvD5C,EACA6C,GAEA,MAAM,UAAEC,KAAcC,GAAS/C,EACzBgD,GAASC,EAAAA,EAAAA,KACf,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,IAAP,CACCP,MACAC,WAAWO,EAAAA,EAAAA,IAAG,oBAAqBP,GACnCQ,MAAON,EAAOO,QACVR,GAGV,G,2DClBcS,EAAoBP,IAAiBQ,EAAAA,EAAAA,IAAoB,O,oHC8B1D3C,GAAO8B,EAAAA,EAAAA,IAA6B,SAAc5C,EAAO6C,GACpE,MAAM,UACJC,EAAA,SACA9B,EAAA,UACA0C,EAAY,SAAQ,QACpBC,EAAA,MACAC,KACGb,IACDc,EAAAA,EAAAA,IAAiB7D,GAEfgD,GAASc,EAAAA,EAAAA,IAAoB,OAAQ9D,GAE3C,OACEkD,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,IAAP,CACCP,MACAC,WAAWO,EAAAA,EAAAA,IAAG,cAAeP,GAC7BQ,MAAO,CACLS,QAAS,OACTC,cAAeN,EACfO,eAAgBN,EAChBO,WAAYN,EACZO,SAAU,WACVC,SAAU,EACVC,SAAU,gBACPrB,EAAOsB,cAERvB,EAEJ/B,UAAAkC,EAAAA,EAAAA,KAACM,EAAAA,EAAA,CAAmBe,MAAOvB,EAAShC,cAG1C,G","sources":["components/dashboard/customer/customer/forms/ViewForm.tsx","pages/dashboard/customer/customer/detail.tsx","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { Stack, StackDivider, CardBody, Card } from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport { useSelector } from \"react-redux\";\nimport { defaultForm } from \"utils/form\";\nimport TextInput from \"modules/forms/TextInput\";\n\nconst ViewCustomerForm = (props: any) => {\n  const form = defaultForm(useForm);\n  const { detail } = useSelector((state: any) => state.customerReducer); \n\n  useEffect(() => {\n    form.setValue('name', detail.name)\n    form.setValue('phone', detail.phone)\n    form.setValue('address', detail.address)\n  }, [detail.name, detail.phone, detail.address]);\n\n  return (\n    <Card w='100%'>\n      <CardBody>\n        <Stack spacing=\"5\" divider={<StackDivider />}>\n          <TextInput {...form} typical='name' isDisabled={true} bg={'gray.100'}/>\n          <TextInput {...form} typical='phone' isDisabled={true} bg={'gray.100'}/>\n          <TextInput {...form} typical='address' isDisabled={true} bg={'gray.100'}/>\n        </Stack> \n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ViewCustomerForm;","import { actions } from \"components/dashboard/customer/customer/slice\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { HStack, Stack } from '@chakra-ui/react'\r\nimport { Link, useLocation, useParams } from \"react-router-dom\";\r\nimport { FormButton } from \"modules/buttons/FormButton\";\r\nimport { makeUrl } from \"utils/link\";\r\nimport ViewCustomerForm from \"components/dashboard/customer/customer/forms/ViewForm\";\r\n\r\nconst DetailCustomerPage = (props: any) => {\r\n  const dispatch = useDispatch();\r\n  const location = useLocation()\r\n  const { customerId } = useParams();\r\n  \r\n  useEffect(() => {\r\n    dispatch(actions.GET_DETAIL_ASYNC(customerId))\r\n  }, []);\r\n  \r\n  return (\r\n    <Stack>\r\n      <HStack pb={5}>\r\n        <FormButton typical='list' permission=\"customer.view\" as={Link} to={makeUrl('/dashboard/customer', location)}/>\r\n        <FormButton typical='edit' permission=\"customer.update\" as={Link} to={makeUrl(`/dashboard/customer/${customerId}/edit`, location)}/>\r\n      </HStack>\r\n      <ViewCustomerForm />\r\n    </Stack>\r\n  )\r\n}\r\n\r\nexport default DetailCustomerPage;","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n"],"names":["props","form","defaultForm","useForm","detail","useSelector","state","customerReducer","useEffect","setValue","name","phone","address","_jsx","Card","w","children","CardBody","_jsxs","Stack","spacing","divider","StackDivider","TextInput","typical","isDisabled","bg","dispatch","useDispatch","location","useLocation","customerId","useParams","actions","GET_DETAIL_ASYNC","HStack","pb","FormButton","permission","as","Link","to","makeUrl","ViewCustomerForm","forwardRef","ref","className","rest","styles","useCardStyles","jsx","chakra","div","cx","__css","body","CardStylesProvider","createStylesContext","direction","justify","align","omitThemingProps","useMultiStyleConfig","display","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","value"],"sourceRoot":""}